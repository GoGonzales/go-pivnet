// This file was generated by counterfeiter
package errorsfakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/go-pivnet/cmd/pivnet/errors"
)

type FakeErrorHandler struct {
	HandleErrorStub        func(err error) error
	handleErrorMutex       sync.RWMutex
	handleErrorArgsForCall []struct {
		err error
	}
	handleErrorReturns struct {
		result1 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeErrorHandler) HandleError(err error) error {
	fake.handleErrorMutex.Lock()
	fake.handleErrorArgsForCall = append(fake.handleErrorArgsForCall, struct {
		err error
	}{err})
	fake.guard("HandleError")
	fake.invocations["HandleError"] = append(fake.invocations["HandleError"], []interface{}{err})
	fake.handleErrorMutex.Unlock()
	if fake.HandleErrorStub != nil {
		return fake.HandleErrorStub(err)
	} else {
		return fake.handleErrorReturns.result1
	}
}

func (fake *FakeErrorHandler) HandleErrorCallCount() int {
	fake.handleErrorMutex.RLock()
	defer fake.handleErrorMutex.RUnlock()
	return len(fake.handleErrorArgsForCall)
}

func (fake *FakeErrorHandler) HandleErrorArgsForCall(i int) error {
	fake.handleErrorMutex.RLock()
	defer fake.handleErrorMutex.RUnlock()
	return fake.handleErrorArgsForCall[i].err
}

func (fake *FakeErrorHandler) HandleErrorReturns(result1 error) {
	fake.HandleErrorStub = nil
	fake.handleErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeErrorHandler) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeErrorHandler) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ errors.ErrorHandler = new(FakeErrorHandler)
